#!/usr/bin/env node

const config = require('../config.js');
const barnStarter = config.barnStarterURL;
const debugUrl = `http://${config.debug.host}:${config.debug.port}/`;

const fs = require('fs');
const _ = require('lodash');
const shell = require('shelljs');
const yaml = require('js-yaml');
const glob = require('glob');
const minimatch = require("minimatch");
const debug = require('debug')('barn-cli');

if (!shell.which('git')) {
  echoErrAndExit('Sorry, this script requires git');
}

const yargs = require('yargs')
  .usage('Usage: barn <command>')
  .demandCommand(1, 'You must provide a valid command')
  .command(['init', 'i'], 'Initiate a barn project with folder name `barn`')
  .command(['generate', 'g'], 'Generate ultimate static website to folder `dist`')
  .command(['server', 's'], `Start up a local server for debug on ${debugUrl}`)
  .command(['deploy', 'd'], 'Deploy to a git-based server such as Github Pages')
  .command(['clean', 'c'], 'Remove files in `dist` folder')
  .example('barn init', 'Initiate barn starter')
  .example('barn generate', 'Generate ultimate static website')
  .example('barn server', `Start up debug server on ${debugUrl}`)
  .example('barn deploy', 'Deploy to a git-based server')
  .example('barn clean', 'Clean files in `dist` folder')
  .help('h').alias('help', 'h')
  .version().alias('v', 'version')
  .epilog('Copyright 2017, see https://github.com/Maples7/barn for more information.');
const argv = yargs.argv;

const command = argv._[0];
debug(`command: ${command}`);
switch (command) {
  case 'i':
  case 'init':
    if (shell.exec(`git clone ${barnStarter}`).code !== 0) {
      echoErrAndExit(`Error: git clone ${barnStarter} failed`);
    }
    break;
  case 'g':
  case 'generate':
    barnGenerate();
    break;
  case 's':
  case 'server':
    // TODO
    break;
  case 'c':
  case 'clean':
    // TODO
    break;
  case 'd':
  case 'deploy':
    // TODO
    break;
  default:
    yargs.showHelp();
    break;
}

// supporting functions

/**
 * print Error and exit
 */
function echoErrAndExit(msg) {
  shell.echo(msg);
  shell.exit(1);
}

/**
 * read yaml file
 */
function readYaml(fileName, action) {
  let content = null;
  try {
    debug(`Reading ${action} from ${fileName}`)
    content = yaml.safeLoad(fs.readFileSync(fileName), 'utf8');
    debug(`your ${action}:`);
    debug(content);
  } catch (e) {
    echoErrAndExit(`Error: read configs from ${fileName} failed: ${e}`);
  }
  return content;
}

/**
 * render html template
 */
function templateRender(theme, engine, locals) {
  let htmls = [];
  switch (theme) {
    case 'pug':
      const pug = require('pug');
      _.forOwn(locals, (pairs, name) => {
        htmls.push({
          name, 
          content: pug.renderFile(`themes/${theme}/${name}.pug`, pairs)
        });
      });
      break;
    default:
      echoErrAndExit(`Error: unsupported html template engine: ${engine}`);
      break;
  }
  return htmls;
}

/**
 * get rendered html
 */
function getRenderedHtml() {
  const spec = readYaml(config.configFileName, 'configs');
  const locals = {};
  _.forEach(spec.htmls, (html) => {
    locals[html] = readYaml(`${config.contentDir}/${html}.yml`, `${html} content`)
  });

  return {
    spec,
    htmls: templateRender(spec.theme, spec.template_engine, locals)
  }
}

/**
 * barnGenerate
 */
function barnGenerate() {
  const {spec, htmls} = getRenderedHtml();
  shell.mkdir('-p', 'dist');
  // compress htmls
  if (spec.html_minifier.enable) {
    const html_minifier = require('html-minifier').minify;
    _.forEach(htmls, (html) => {
      if (!_.some(spec.html_minifier.exclude, o => minimatch(`${html.name}.html`, o))) {
        html.content = html_minifier(html.content);
        // TODO: write to html files
      }
    });
  }

  // TODO: conpress css and write to css files
}